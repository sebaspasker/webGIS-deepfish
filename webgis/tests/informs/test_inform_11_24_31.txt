============================= test session starts ==============================
platform linux -- Python 3.10.2, pytest-7.1.2, pluggy-1.0.0
django: settings: webgis.settings (from ini)
rootdir: /home/sebas_pasker/Documents/Trabajo_Investigacion/Deepfish2/cuadro_mando/project/webGIS/deepfish-webgis/webgis, configfile: pytest.ini
plugins: django-4.5.2
collected 10 items

tests/test_ais_query.py .......FFF                                       [100%]

=================================== FAILURES ===================================
_________________________ TestAISQuery.testHeatNotType _________________________

self = <tests.test_ais_query.TestAISQuery object at 0x7fe5a21a1750>

    def testHeatNotType(self):
        try:
>           AISQuery_To_Collection(
                allVessels(),
                allAIS(),
                Point,
                heat="")
E               TypeError: AISQuery_To_Collection() got an unexpected keyword argument 'heat'

tests/test_ais_query.py:144: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_ais_query.TestAISQuery object at 0x7fe5a21a1750>

    def testHeatNotType(self):
        try:
            AISQuery_To_Collection(
                allVessels(),
                allAIS(),
                Point,
                heat="")
            assert False, "Should have an exception"
        except Exception as e:
>           assert isinstance(e, InstanceTypeException) == True
E           assert False == True
E            +  where False = isinstance(TypeError("AISQuery_To_Collection() got an unexpected keyword argument 'heat'"), InstanceTypeException)

tests/test_ais_query.py:151: AssertionError
____________________ TestAISQuery.testVesselsDiferentQuery _____________________

self = <tests.test_ais_query.TestAISQuery object at 0x7fe5a21a10c0>

    def testVesselsDiferentQuery(self):
        try:
>           AISQuery_To_Collection(
                allAIS(),
                allAIS(),
                Point,
            )

tests/test_ais_query.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

Vessels = <QuerySet [<AISVessel: AISVessel object (1)>, <AISVessel: AISVessel object (2)>]>
AISQuery = <QuerySet [<AISVessel: AISVessel object (1)>, <AISVessel: AISVessel object (2)>]>
Type = <class 'geojson.geometry.Point'>, Heat = False

    def AISQuery_To_Collection(Vessels, AISQuery, Type, Heat=False):
        """
        From a Vessel and AISVessel (Model) QuerySet creates
        a GeoJSON LineStringCollection
    
        Parameters:
            (QuerySet, QuerySet)
            returns FeatureCollection
        """
    
>       FormatComprobation(Vessels, AISQuery, Type, Heat)

webgisapp/utils/ais_to_geojson.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

Vessels = <QuerySet [<AISVessel: AISVessel object (1)>, <AISVessel: AISVessel object (2)>]>
AISQuery = <QuerySet [<AISVessel: AISVessel object (1)>, <AISVessel: AISVessel object (2)>]>
Type = <class 'geojson.geometry.Point'>, Heat = False

    def FormatComprobation(Vessels, AISQuery, Type, Heat):
        if Vessels is None:
            raise EmptyVarException
        elif AISQuery is None:
            raise EmptyVarException
        elif Type is None:
            raise EmptyVarException
        elif Heat is None:
            raise EmptyVarException
        elif not isinstance(Vessels, QuerySet):
            raise InstanceTypeException
        elif not isinstance(AISQuery, QuerySet):
            raise InstanceTypeException
        elif not isinstance(Type, Point) and \
                not isinstance(Type, LineString):
>           raise InstanceTypeException
E           webgisapp.utils.exceptions.InstanceTypeException: (InstanceTypeException(...), 'Instance is incorrect')

webgisapp/utils/ais_to_geojson.py:95: InstanceTypeException

During handling of the above exception, another exception occurred:

self = <tests.test_ais_query.TestAISQuery object at 0x7fe5a21a10c0>

    def testVesselsDiferentQuery(self):
        try:
            AISQuery_To_Collection(
                allAIS(),
                allAIS(),
                Point,
            )
            assert False, "Should have an exception"
        except Exception as e:
>           assert isinstance(e, QueryTypeException) == True
E           AssertionError: assert False == True
E            +  where False = isinstance(InstanceTypeException(InstanceTypeException(...), 'Instance is incorrect'), QueryTypeException)

tests/test_ais_query.py:162: AssertionError
______________________ TestAISQuery.testAISDiferentQuery _______________________

self = <tests.test_ais_query.TestAISQuery object at 0x7fe5a21a1ab0>

    def testAISDiferentQuery(self):
        try:
>           AISQuery_To_Collection(
                allVessels(),
                allVessels(),
                Point,
            )

tests/test_ais_query.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

Vessels = <QuerySet [<Vessel: Vessel object (123456789)>, <Vessel: Vessel object (987654321)>]>
AISQuery = <QuerySet [<Vessel: Vessel object (123456789)>, <Vessel: Vessel object (987654321)>]>
Type = <class 'geojson.geometry.Point'>, Heat = False

    def AISQuery_To_Collection(Vessels, AISQuery, Type, Heat=False):
        """
        From a Vessel and AISVessel (Model) QuerySet creates
        a GeoJSON LineStringCollection
    
        Parameters:
            (QuerySet, QuerySet)
            returns FeatureCollection
        """
    
>       FormatComprobation(Vessels, AISQuery, Type, Heat)

webgisapp/utils/ais_to_geojson.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

Vessels = <QuerySet [<Vessel: Vessel object (123456789)>, <Vessel: Vessel object (987654321)>]>
AISQuery = <QuerySet [<Vessel: Vessel object (123456789)>, <Vessel: Vessel object (987654321)>]>
Type = <class 'geojson.geometry.Point'>, Heat = False

    def FormatComprobation(Vessels, AISQuery, Type, Heat):
        if Vessels is None:
            raise EmptyVarException
        elif AISQuery is None:
            raise EmptyVarException
        elif Type is None:
            raise EmptyVarException
        elif Heat is None:
            raise EmptyVarException
        elif not isinstance(Vessels, QuerySet):
            raise InstanceTypeException
        elif not isinstance(AISQuery, QuerySet):
            raise InstanceTypeException
        elif not isinstance(Type, Point) and \
                not isinstance(Type, LineString):
>           raise InstanceTypeException
E           webgisapp.utils.exceptions.InstanceTypeException: (InstanceTypeException(...), 'Instance is incorrect')

webgisapp/utils/ais_to_geojson.py:95: InstanceTypeException

During handling of the above exception, another exception occurred:

self = <tests.test_ais_query.TestAISQuery object at 0x7fe5a21a1ab0>

    def testAISDiferentQuery(self):
        try:
            AISQuery_To_Collection(
                allVessels(),
                allVessels(),
                Point,
            )
            assert False, "Should have an exception"
        except Exception as e:
>           assert isinstance(e, QueryTypeException) == True
E           AssertionError: assert False == True
E            +  where False = isinstance(InstanceTypeException(InstanceTypeException(...), 'Instance is incorrect'), QueryTypeException)

tests/test_ais_query.py:173: AssertionError
=========================== short test summary info ============================
FAILED tests/test_ais_query.py::TestAISQuery::testHeatNotType - assert False ...
FAILED tests/test_ais_query.py::TestAISQuery::testVesselsDiferentQuery - Asse...
FAILED tests/test_ais_query.py::TestAISQuery::testAISDiferentQuery - Assertio...
========================= 3 failed, 7 passed in 0.49s ==========================
